
## ✅ 構成イメージ

```
[ユーザー] → [CloudFront] → [AWS WAF] → [オリジン（ALBやS3など）]
                   ↑
         Cookieによるアクセス制御
```

---

## ✅ 前提

- CloudFrontディストリビューションがすでにある。
- ユーザーのブラウザには `session_id` というCookieが設定されている。
- WAFをCloudFrontにアタッチして、Cookieの値に基づいてアクセス制御したい。

---

## ✅ 手順

### Step 1: AWS WAFのWebACLを作成

1. **AWSマネジメントコンソール**にログイン  
2. **WAF & Shield** → **Web ACL** を選択 → **Web ACLの作成**

   - 名前: `AllowWithSessionCookie`
   - リソースタイプ: `CloudFront`
   - CloudFrontディストリビューションを選択

---

### Step 2: ルールの作成

1. ルールを追加 → **ルールビルダーでルールを作成**
2. ルールタイプ: **カスタムルール**
3. ルール名: `AllowIfSessionCookieExists`
4. スコープ: `リクエスト`

#### 条件の設定（Cookieの値を使う）

- **一致の一致条件タイプ**: `リクエストヘッダー`
- **ヘッダー名**: `cookie`
- **マッチタイプ**: `含む（contains）`
- **文字列**: `session_id=`

※`session_id=` が含まれているかどうかを判定します。

5. このルールのアクション: `許可（Allow）`

---

### Step 3: デフォルトアクションを「拒否」にする

- ルールの優先順位が重要です。
- `AllowIfSessionCookieExists` が一致しなかった場合、**他のリクエストはブロック（Deny）**するように、WebACLの**デフォルトアクションを「拒否」**に設定してください。

---

### Step 4: Web ACLをCloudFrontにアタッチ

- WebACL作成時に選択していない場合、あとから **「WebACL」→「リソースの関連付け」** で CloudFront にアタッチ可能です。

---

## ✅ 補足

- Cookieの値が `session_id=` を含むリクエストのみ許可され、それ以外はブロックされます。
- セッションの有効期限まではチェックできません（WAFはステートレスです）。
- 複雑なパターンマッチが必要なら、**正規表現ルールセット（Regex Match Statement）**の使用も可能です。

---

## ✅ 例：複数条件を追加したい場合

例えば、次のような高度な条件も可能です：

- `session_id=` が含まれている **かつ**
- `User-Agent` が特定の値（例えばbot以外）

この場合は、**「AND条件のルール」**を作成して複数ステートメントを組み合わせます。

---

必要であれば、TerraformなどでのWAFルールの構成例もご提供できます！どういう環境で設定する予定か（マネジメントコンソール？Terraform？CloudFormation？）も教えていただければ、もっと具体的にサポートできますよ。